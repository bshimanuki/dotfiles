set nocompatible

filetype off

if has('unix')
	runtime debian.vim
	let g:vimpath=$HOME.'/.vim'
endif

if has('win32')
	let g:vimpath=$HOME.'/vimfiles'
endif

function PluginEnabled(plugin)
	let l:plugin_path=g:vimpath.'/plugged/'.a:plugin
	return exists('g:plugs') && has_key(g:plugs, a:plugin) && !empty(glob(l:plugin_path.'/.git'))
endfunction

" vim-polyglot
let g:polyglot_disabled = ['sensible', 'autoindent']
let g:NERDDelimiterMap={} " workaround for broken caddyfile ftplugin

" vim-plug
if !filereadable(g:vimpath.'/autoload/plug.vim')
	exec 'silent !wget --directory-prefix="'.g:vimpath.'/autoload/" '
				\ .'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	if v:shell_error==0
		autocmd VimEnter * echomsg 'vim-plug installed. Run :PlugInstall to install plugins.'
	else
		autocmd VimEnter * echomsg 'vim-plug could not be installed.'
		let l:vim_plug_not_installed=1
	endif
endif
if !exists('l:vim_plug_not_installed')
	call plug#begin(g:vimpath.'/plugged')
	Plug 'Lokaltog/vim-easymotion'
	Plug 'bkad/CamelCaseMotion'
	Plug 'embear/vim-localvimrc'
	Plug 'gerw/vim-latex-suite', {'for': ['context', 'plaintex', 'tex']}
	Plug 'jpalardy/vim-slime'
	Plug 'luochen1990/rainbow'
	Plug 'majutsushi/tagbar', {'on': ['TagbarOpen', 'TagbarToggle']}
	Plug 'scrooloose/nerdcommenter'
	Plug 'scrooloose/nerdtree'
	Plug 'sheerun/vim-polyglot'
	Plug 'terryma/vim-multiple-cursors'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-rhubarb'
	Plug 'tpope/vim-sleuth'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-unimpaired'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	if has('unix') && !has('win32unix')
		Plug 'junegunn/fzf', {'do': './install --bin'}
		Plug 'junegunn/fzf.vim'
		" last version before Vim 8.2.3995+ required (from Ubuntu 22.04)
		Plug 'ycm-core/YouCompleteMe', {'commit': '7b83740'}
	else
		Plug 'kien/ctrlp.vim'
	endif
	call plug#end()
endif

" Other Plugins
runtime macros/matchit.vim

" Font, Colorscheme
colorscheme koehler
highlight Cursor guibg=RoyalBlue ctermbg=lightblue
highlight MatchParen guibg=darkblue guifg=cyan ctermbg=darkblue ctermfg=cyan
highlight Folded guibg=Gray11 guifg=darkcyan ctermbg=234 ctermfg=darkcyan " 234=Gray11
highlight DiffDelete ctermfg=lightblue
highlight Todo ctermfg=yellow
if has('win32unix')
	let &t_ti.="\e[1 q"
	let &t_SI.="\e[5 q"
	let &t_EI.="\e[1 q"
	let &t_te.="\e[0 q"
endif

" Spell
highlight SpellBad ctermbg=darkred ctermfg=lightred
highlight SpellCap ctermbg=darkblue ctermfg=lightblue
highlight SpellRare ctermbg=darkmagenta ctermfg=lightmagenta
highlight SpellLocal ctermbg=darkblue ctermfg=lightblue

" Tmux
if exists('$TMUX')
	let s:cwd=fnamemodify(".", ":p:~")
	let s:file=expand("%:.")
	if empty(s:file)
		let s:file="[No Name]"
	endif
	let &t_ti="\<Esc>]2;" . s:cwd . " > (VIM) " . s:file . "\<Esc>\\" . &t_ti
	set notitle
endif

" Remaps
"" Function Movement
let s:function_match='^\(\w\(\n\=[^;]\)\{-\}\)\='
let s:delete_last_history=':<C-u>call histdel("/",-1)<CR> :let @/=histget("/",-1)<CR>'
noremap <expr> <Plug>DeleteLastHistory <SID>DeleteLastHistory()
exec "noremap <silent> [[ :call search('".s:function_match."{','sb')<CR>"
exec "noremap <silent> ]] :call search('".s:function_match."{','s')<CR>"
exec "noremap <silent> [] :call search('".s:function_match."}','sb')<CR>"
exec "noremap <silent> ][ :call search('".s:function_match."}','s')<CR>"
exec "vnoremap <silent> [[ ?".s:function_match."{<CR> " . s:delete_last_history . "gv^"
exec "vnoremap <silent> ]] /".s:function_match."{<CR> " . s:delete_last_history . "gv^"
exec "vnoremap <silent> [] ?".s:function_match."}<CR> " . s:delete_last_history . "gv^"
exec "vnoremap <silent> ][ /".s:function_match."}<CR> " . s:delete_last_history . "gv^"
"" Layout
command! Bd b # | bd #
nnoremap <leader>tt :NERDTreeToggle<CR> <C-w><C-p> :TagbarToggle<CR>
nnoremap <leader>to :NERDTree<CR> <C-w><C-p> :TagbarOpen<CR>
nnoremap <leader>tc :NERDTreeClose<CR> <C-w><C-p> :TagbarClose<CR>

" Automatically open, but do not go to (if there are errors) the quickfix /
" location list window, or close it when is has become empty.
autocmd QuickFixCmdPost [^l]* nested belowright cwindow
autocmd QuickFixCmdPost    l* nested belowright lwindow

exec "source ".g:vimpath."/common_before_plugins.vim"
exec "source ".g:vimpath."/common.vim"
