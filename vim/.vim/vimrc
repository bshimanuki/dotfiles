" Vundle
	set nocompatible
	filetype off

	if has('unix')
		runtime! debian.vim
		let vimpath=$HOME.'/.vim'
	endif

	if has('win32')
		let vimpath=$HOME.'/vimfiles'
	endif

	exec 'set rtp+='.vimpath.'/bundle/Vundle.vim'
	call vundle#begin(vimpath.'/bundle')

	Plugin 'Lokaltog/vim-easymotion'
	Plugin 'MarcWeber/vim-addon-mw-utils'
	Plugin 'vim-airline/vim-airline'
	Plugin 'vim-airline/vim-airline-themes'
	Plugin 'embear/vim-localvimrc'
	Plugin 'garbas/vim-snipmate'
	Plugin 'gerw/vim-latex-suite'
	Plugin 'jpalardy/vim-slime'
	Plugin 'kien/ctrlp.vim'
	Plugin 'luochen1990/rainbow'
	Plugin 'majutsushi/tagbar'
	Plugin 'mattn/emmet-vim'
	Plugin 'scrooloose/nerdcommenter'
	Plugin 'scrooloose/nerdtree'
	Plugin 'terryma/vim-multiple-cursors'
	Plugin 'tomtom/tlib_vim'
	Plugin 'tpope/vim-fugitive'
	Plugin 'tpope/vim-surround.git'
	Plugin 'tpope/vim-unimpaired'
	Plugin 'VundleVim/Vundle.vim'
	if has('unix') && !has('win32unix')
		Plugin 'Valloric/YouCompleteMe'
		Plugin 'scrooloose/syntastic'
	endif
	" Plugin 'Rip-Rip/clang_complete'
	call vundle#end()

" Other Plugins
runtime macros/matchit.vim

" Airline
	if has('gui_running') || &t_Co==256
		let g:airline_theme='bubblegum'
	else
		let g:airline_theme='monochrome'
	endif
	let g:airline#extensions#tabline#enabled=1
	" let g:airline_powerline_fonts=1
	let g:timeoutlen=50
	if !exists('g:airline_symbols')
		let g:airline_symbols={}
	endif
	let g:airline_symbols.space="\ua0"
	let g:airline_section_y='' " turn off file encoding, file format

" Easymotion
	noremap <Plug>(easymotion-prefix) <Nop>

" Emmet
	let g:user_emmet_install_global=0

" Eclim
	let g:EclimCompletionMethod='omnifunc'
	let s:eclipse_home=$ECLIPSE_HOME
	if has("win32")
		let s:null_file='NUL'
	else
		let s:null_file='/dev/null'
	endif
	exec 'command! StartEclim !'.s:eclipse_home.'/eclimd > '.s:null_file.' 2>&1 &'

" Latex Suite
	let g:tex_flavor='latex'
	imap <C-space> <Plug>IMAP_JumpForward
	nmap <C-space> <Plug>IMAP_JumpForward
	vmap <C-space> <Plug>IMAP_JumpForward

" Local vimrc
	let g:localvimrc_persistent=1
	let g:localvimrc_persistence_file=vimpath.'/.localvimrc_persistent'

" NERD Commenter
	let g:NERDSpaceDelims=1

" NERD Tree
	nnoremap <leader>n :NERDTreeToggle<CR>

" Rainbow Parentheses
	let paren_colors = ['red', 'darkcyan', 'lightyellow', 'darkgreen', 'lightblue', 'brown', 'darkmagenta', 'gray']
	let g:rainbow_active = 1
	let g:rainbow_conf = {
		\ 'guifgs': paren_colors,
		\ 'ctermfgs': paren_colors,
		\ 'operators': '_,_',
		\ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
		\ 'separately': {
		\  '*': 0,
		\  'clojure': {},
		\  'lisp': {},
		\  'scheme': {},
		\ }
		\}

" Syntastic
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_check_on_open=1
	let g:syntastic_check_on_wq=0

" Slime
	let g:slime_target = 'tmux'
	let g:slime_default_config = {'socket_name': 'default', 'target_pane': '0'}
	let g:slime_dont_ask_default = 1
	let g:slime_no_mappings = 1
	let g:slime_python_ipython = 1
	xmap <leader>s <Plug>SlimeRegionSend
	nmap <leader>s <Plug>SlimeMotionSend
	nmap <leader>ss <Plug>SlimeParagraphSend
	nmap <leader>sv <Plug>SlimeConfig

" Slimv
	let g:lisp_rainbow = 1

" Tagbar
	nnoremap <leader>t :TagbarOpen fj<CR>

" YouCompleteMe
	let g:ycm_confirm_extra_conf = 0
	let g:ycm_global_ycm_extra_conf=vimpath.'/.ycm_extra_conf.py'
	let g:ycm_disable_for_files_larger_than_kb=10000
	let g:ycm_collect_identifiers_from_tag_files=1
	let g:ycm_collect_identifiers_from_comments_and_strings=1
	let g:ycm_filetype_blacklist={
		\ 'tagbar' : 1,
		\ 'qf' : 1,
		\ 'notes' : 1,
		\ 'markdown' : 1,
		\ 'unite' : 1,
		\ 'text' : 1,
		\ 'vimwiki' : 1,
		\ 'pandoc' : 1,
		\ 'infolog' : 1,
		\ 'mail' : 1,
		\ 'tex' : 1
		\}
	nnoremap <leader>f :YcmCompleter GoTo<CR>

" Config
if has("patch-7.4.338")
	let &showbreak='....'
	set breakindent
	set breakindentopt=shift:0
endif
set fileformats=unix,dos
set number
filetype plugin indent on
syntax on
set cinoptions=:0,l1,g0
set showcmd cmdheight=2
set tabstop=2 shiftwidth=2
set nofoldenable foldmethod=syntax
set laststatus=2
set linebreak
set lazyredraw
set scrolloff=8 sidescrolloff=8
set modeline
set visualbell t_vb=
autocmd GUIEnter * set t_vb=
set ruler
set mouse=a
set backspace=indent,eol,start
set display=lastline,uhex
set whichwrap+=<,>,[,]
set wildmenu wildmode=list,full
let mapleader="\\"
set notimeout ttimeout ttimeoutlen=200
set splitbelow splitright
set diffopt+=vertical
set history=100
set wildignore=bin
set directory=~/tmp//,~/tmp,/var/tmp,/tmp

" Searching
set incsearch hlsearch
nnoremap <silent><Space> :noh<CR>
vnoremap <silent><Space> <Esc>:noh<CR>gv

" Font, Colorscheme
if has('gui_running')
	colorscheme torte
	set cursorline
	hi CursorLine guibg=gray20
else
	colorscheme koehler
	if &t_Co==256
		set cursorline
		hi CursorLine cterm=NONE ctermbg=236 " 236=Gray19
	endif
endif
if has('unix')
	set guifont=Lucida\ Console\ 11
endif
if has('win32')
	set guifont=Lucida_Console:h11
endif
hi Cursor guibg=RoyalBlue ctermbg=lightblue
hi MatchParen guibg=darkblue guifg=cyan ctermbg=darkblue ctermfg=cyan
hi Folded guibg=Gray11 guifg=darkcyan ctermbg=234 ctermfg=darkcyan " 234=Gray11
hi DiffDelete ctermfg=lightblue
if has('win32unix')
	let &t_ti.="\e[1 q"
	let &t_SI.="\e[5 q"
	let &t_EI.="\e[1 q"
	let &t_te.="\e[0 q"
endif

" Spell
set spelllang=en_us
exec 'set spellfile='.vimpath.'/spell/en.utf-8.add'
hi SpellBad ctermfg=lightred
hi SpellCap ctermfg=darkblue
hi SpellRare ctermfg=darkmagenta
hi SpellLocal ctermfg=darkblue

" Shell
set shellslash
set grepprg=grep\ -nH\ $*

" Tmux
if exists('$TMUX')
	let s:cwd=fnamemodify(".", ":p:~")
	let s:file=expand("%:.")
	if empty(s:file)
		let s:file="[No Name]"
	endif
	let &t_ti="\<Esc>]2;" . s:cwd . " > (VIM) " . s:file . "\<Esc>\\" . &t_ti
	set notitle
endif

" Remaps
"" Save and Quit
command! Q q
command! W w
command! Wq wq
command! WQ wq
"" Movement
noremap  <Up>   gk
noremap  <Down> gj
noremap  <Home> g<Home>
noremap  <End>  g<End>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>
"" Function Movement
noremap <silent> [[ :call search('^\(\w.*\)\={','sb')<CR>
noremap <silent> ]] :call search('^\(\w.*\)\={','s')<CR>
noremap <silent> [] :call search('^\(\w.*\)\=}','sb')<CR>
noremap <silent> ][ :call search('^\(\w.*\)\=}','s')<CR>
vnoremap <silent> [[ ?^\(\w.*\)\={<CR> :<C-u>call histdel('/',-1)<CR> :let @/=histget('/',-1)<CR>gv^
vnoremap <silent> ]] /^\(\w.*\)\={<CR> :<C-u>call histdel('/',-1)<CR> :let @/=histget('/',-1)<CR>gv^
vnoremap <silent> [] ?^\(\w.*\)\=}<CR> :<C-u>call histdel('/',-1)<CR> :let @/=histget('/',-1)<CR>gv^
vnoremap <silent> ][ /^\(\w.*\)\=}<CR> :<C-u>call histdel('/',-1)<CR> :let @/=histget('/',-1)<CR>gv^

" Automatically open, but do not go to (if there are errors) the quickfix /
" location list window, or close it when is has become empty.
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

autocmd FileType help setlocal nospell
