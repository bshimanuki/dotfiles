set nocompatible
filetype off

if has('unix')
	runtime debian.vim
	let g:vimpath=$HOME.'/.vim'
endif

if has('win32')
	let g:vimpath=$HOME.'/vimfiles'
endif

if has('unix') && !has('win32unix')
	exec 'set rtp+='.g:vimpath.'/ycm/YouCompleteMe'
endif

function PluginEnabled(plugin)
	let l:plugin_path=g:vimpath.'/plugged/'.a:plugin
	return exists('g:plugs') && has_key(g:plugs, a:plugin) && !empty(glob(l:plugin_path.'/.git'))
endfunction

" vim-plug
if !filereadable(g:vimpath.'/autoload/plug.vim')
	exec 'silent !curl -fLo '.g:vimpath.'/autoload/plug.vim --create-dirs '
				\ .'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	if v:shell_error==0
		autocmd VimEnter * echomsg 'vim-plug installed. Run :PlugInstall to install plugins.'
	else
		autocmd VimEnter * echomsg 'vim-plug could not be installed.'
		let l:vim_plug_not_installed=1
	endif
endif
if !exists('l:vim_plug_not_installed')
	call plug#begin(g:vimpath.'/plugged')
	Plug 'Lokaltog/vim-easymotion'
	Plug 'MarcWeber/vim-addon-mw-utils'
	Plug 'bkad/CamelCaseMotion'
	Plug 'ciaranm/detectindent'
	Plug 'embear/vim-localvimrc'
	Plug 'garbas/vim-snipmate'
	Plug 'gerw/vim-latex-suite', {'for': ['context', 'plaintex', 'tex']}
	Plug 'haya14busa/incsearch-easymotion.vim'
	Plug 'haya14busa/incsearch.vim'
	Plug 'jpalardy/vim-slime'
	Plug 'kien/ctrlp.vim'
	Plug 'luochen1990/rainbow'
	Plug 'majutsushi/tagbar'
	Plug 'mattn/emmet-vim'
	Plug 'scrooloose/nerdcommenter'
	Plug 'scrooloose/nerdtree'
	Plug 'terryma/vim-multiple-cursors'
	Plug 'tomtom/tlib_vim'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-unimpaired'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	if has('unix') && !has('win32unix')
		Plug 'scrooloose/syntastic'
	endif
	call plug#end()
endif

if PluginEnabled('vim-airline')
	if has('gui_running') || &t_Co==256
		let g:airline_theme='bubblegum'
	else
		let g:airline_theme='monochrome'
	endif
	let g:airline#extensions#tabline#enabled=1
	" let g:airline_powerline_fonts=1
	if !exists('g:airline_symbols')
		let g:airline_symbols={}
	endif
	let g:airline_symbols.space="\ua0"
	let g:airline_section_y='' " turn off file encoding, file format
endif

if PluginEnabled('CamelCaseMotion')
	call camelcasemotion#CreateMotionMappings(',')
endif

if PluginEnabled('detectindent')
	let g:detectindent_preferred_expandtab=0
	let g:detectindent_preferred_indent=2
	autocmd FileType * DetectIndent
endif

if PluginEnabled('vim-easymotion')
	noremap <Plug>(easymotion-prefix) <Nop>
endif

if PluginEnabled('emmet-vim')
	let g:user_emmet_install_global=0
endif

if PluginEnabled('incsearch.vim')
	map /  <Plug>(incsearch-forward)
	map ?  <Plug>(incsearch-backward)
	map g/ <Plug>(incsearch-stay)
endif

if PluginEnabled('incsearch-easymotion.vim')
	map ,/ <Plug>(incsearch-easymotion-/)
	map ,? <Plug>(incsearch-easymotion-?)
	map ,g/ <Plug>(incsearch-easymotion-stay)
endif

if PluginEnabled('vim-latex-suite')
	let g:tex_flavor='latex'
	imap <C-f> <Plug>IMAP_JumpForward
	map <C-f> <Plug>IMAP_JumpForward
endif

if PluginEnabled('vim-localvimrc')
	let g:localvimrc_persistent=1
	let g:localvimrc_persistence_file=g:vimpath.'/.localvimrc_persistent'
endif

if PluginEnabled('nerdcommenter')
	let g:NERDSpaceDelims=1
	let g:NERDCustomDelimiters={
		\ 'c':{'left':'//'},
		\ 'python':{'left':'#'},
		\} " requires C99
endif

if PluginEnabled('nerdtree')
	nnoremap <leader>n :NERDTreeToggle<CR>
endif

if PluginEnabled('rainbow')
	let s:paren_colors=['red', 'darkcyan', 'lightyellow', 'darkgreen', 'lightblue', 'brown', 'darkmagenta', 'gray']
	let g:rainbow_active=1
	let g:rainbow_conf={
		\ 'guifgs': s:paren_colors,
		\ 'ctermfgs': s:paren_colors,
		\ 'operators': '_,_',
		\ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
		\ 'separately': {
		\  '*': 0,
		\  'clojure': {},
		\  'lisp': {},
		\  'scheme': {},
		\ }
		\}
endif

if PluginEnabled('syntastic')
	let g:syntastic_always_populate_loc_list=1
	let g:syntastic_check_on_open=1
	let g:syntastic_check_on_wq=0
endif

if PluginEnabled('vim-slime')
	let g:slime_target='tmux'
	let g:slime_default_config={'socket_name': 'default', 'target_pane': '0'}
	let g:slime_dont_ask_default=1
	let g:slime_no_mappings=1
	" let g:slime_python_ipython=1
	xmap <leader>s <Plug>SlimeRegionSend
	nmap <leader>s <Plug>SlimeMotionSend
	nmap <leader>ss <Plug>SlimeParagraphSend
	nmap <leader>sv <Plug>SlimeConfig
endif

if PluginEnabled('tagbar')
	nnoremap <leader>t :TagbarOpen fj<CR>
endif

" Other Plugins
runtime macros/matchit.vim

"" Eclim
	let g:EclimCompletionMethod='omnifunc'
	let s:eclipse_home=$ECLIPSE_HOME
	if has("win32")
		let s:null_file='NUL'
	else
		let s:null_file='/dev/null'
	endif
	exec 'command! StartEclim !'.s:eclipse_home.'/eclimd > '.s:null_file.' 2>&1 &'

"" YouCompleteMe
	let g:ycm_confirm_extra_conf=0
	let g:ycm_extra_conf_vim_data=['v:version','&filetype']
	let g:ycm_global_ycm_extra_conf=g:vimpath.'/.ycm_extra_conf.py'
	let g:ycm_seed_identifiers_with_syntax=1
	let g:ycm_disable_for_files_larger_than_kb=10000
	let g:ycm_collect_identifiers_from_tag_files=1
	let g:ycm_collect_identifiers_from_comments_and_strings=1
	let g:ycm_filetype_blacklist={
		\ 'tagbar' : 1,
		\ 'qf' : 1,
		\ 'notes' : 1,
		\ 'markdown' : 1,
		\ 'unite' : 1,
		\ 'text' : 1,
		\ 'vimwiki' : 1,
		\ 'pandoc' : 1,
		\ 'infolog' : 1,
		\ 'mail' : 1,
		\ 'tex' : 1
		\}
	nnoremap <leader>f :YcmCompleter GoTo<CR>
	nnoremap <leader>h :YcmCompleter GetDoc<CR>

" Config
if has("patch-7.4.338")
	let &showbreak='....'
	set breakindent
	set breakindentopt=shift:0
endif
set fileformats=unix,dos
set number
filetype plugin indent on
syntax on
set cinoptions=:0,l1,g0
set showcmd cmdheight=2
set tabstop=2 shiftwidth=2
set nofoldenable foldmethod=syntax
set laststatus=2
set linebreak
set lazyredraw
set scrolloff=8 sidescrolloff=8
set modeline
set visualbell t_vb=
autocmd GUIEnter * set t_vb=
set ruler
set mouse=
set backspace=indent,eol,start
set display=lastline,uhex
set whichwrap+=<,>,[,]
set wildmenu wildmode=list,full
let mapleader="\\"
set notimeout ttimeout ttimeoutlen=0
set splitbelow splitright
set diffopt+=vertical
set history=100
set wildignore=bin
set directory=~/tmp//,~/tmp,/var/tmp,.,/tmp

" Searching
set incsearch hlsearch
nnoremap <silent><Space> :noh<CR>
vnoremap <silent><Space> <Esc>:noh<CR>gv

" Font, Colorscheme
if has('gui_running')
	colorscheme torte
	set cursorline
	hi CursorLine guibg=gray20
else
	colorscheme koehler
	if &t_Co==256
		set cursorline
		hi CursorLine cterm=NONE ctermbg=236 " 236=Gray19
	endif
endif
if has('unix')
	set guifont=Lucida\ Console\ 11
endif
if has('win32')
	set guifont=Lucida_Console:h11
endif
hi Cursor guibg=RoyalBlue ctermbg=lightblue
hi MatchParen guibg=darkblue guifg=cyan ctermbg=darkblue ctermfg=cyan
hi Folded guibg=Gray11 guifg=darkcyan ctermbg=234 ctermfg=darkcyan " 234=Gray11
hi DiffDelete ctermfg=lightblue
hi Todo ctermfg=yellow
if has('win32unix')
	let &t_ti.="\e[1 q"
	let &t_SI.="\e[5 q"
	let &t_EI.="\e[1 q"
	let &t_te.="\e[0 q"
endif

" Spell
set spelllang=en_us
exec 'set spellfile='.g:vimpath.'/spell/en.utf-8.add'
hi SpellBad ctermbg=darkred ctermfg=lightred
hi SpellCap ctermbg=darkblue ctermfg=lightblue
hi SpellRare ctermbg=darkmagenta ctermfg=lightmagenta
hi SpellLocal ctermbg=darkblue ctermfg=lightblue

" Shell
set shellslash
set grepprg=grep\ -nH\ $*

" Tmux
if exists('$TMUX')
	let s:cwd=fnamemodify(".", ":p:~")
	let s:file=expand("%:.")
	if empty(s:file)
		let s:file="[No Name]"
	endif
	let &t_ti="\<Esc>]2;" . s:cwd . " > (VIM) " . s:file . "\<Esc>\\" . &t_ti
	set notitle
endif

" Remaps
"" Save and Quit
command! -bang Q q<bang>
command! -bang Qa qa<bang>
command! -bang QA qa<bang>
command! W w
command! Wq wq
command! WQ wq
"" Movement
noremap <Up> gk
noremap <Down> gj
noremap <Home> g<Home>
noremap <End> g<End>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>
"" Function Movement
let s:function_match='^\(\w\(\n\=[^;]\)\{-\}\)\='
let s:delete_last_history=':<C-u>call histdel("/",-1)<CR> :let @/=histget("/",-1)<CR>'
noremap <expr> <Plug>DeleteLastHistory <SID>DeleteLastHistory()
exec "noremap <silent> [[ :call search('".s:function_match."{','sb')<CR>"
exec "noremap <silent> ]] :call search('".s:function_match."{','s')<CR>"
exec "noremap <silent> [] :call search('".s:function_match."}','sb')<CR>"
exec "noremap <silent> ][ :call search('".s:function_match."}','s')<CR>"
exec "vnoremap <silent> [[ ?".s:function_match."{<CR> " . s:delete_last_history . "gv^"
exec "vnoremap <silent> ]] /".s:function_match."{<CR> " . s:delete_last_history . "gv^"
exec "vnoremap <silent> [] ?".s:function_match."}<CR> " . s:delete_last_history . "gv^"
exec "vnoremap <silent> ][ /".s:function_match."}<CR> " . s:delete_last_history . "gv^"
"" Layout
command! Bd b # | bd #
nnoremap <leader>tt :NERDTreeToggle<CR> <C-w><C-p> :Tagbar<CR>
nnoremap <leader>to :NERDTree<CR> <C-w><C-p> :TagbarOpen<CR>
nnoremap <leader>tc :NERDTreeClose<CR> <C-w><C-p> :TagbarClose<CR>

" Automatically open, but do not go to (if there are errors) the quickfix /
" location list window, or close it when is has become empty.
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
